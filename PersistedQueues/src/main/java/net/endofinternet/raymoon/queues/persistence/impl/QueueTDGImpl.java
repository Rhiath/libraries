/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.endofinternet.raymoon.queues.persistence.impl;

import com.almworks.sqlite4java.SQLiteConnection;
import com.almworks.sqlite4java.SQLiteException;
import com.almworks.sqlite4java.SQLiteStatement;
import com.google.gson.Gson;
import net.endofinternet.raymoon.persistence.exceptions.PersistenceException;
import net.endofinternet.raymoon.persistence.implementation.AbstractTableDataGateway;
import net.endofinternet.raymoon.persistence.interfaces.ConnectionProvider;
import net.endofinternet.raymoon.persistence.utilities.Tables;
import net.endofinternet.raymoon.queues.persistence.QueueTDG;
import net.endofinternet.raymoon.queues.persistence.QueueToken;

/**
 *
 * @author raymoon
 */
public class QueueTDGImpl extends AbstractTableDataGateway implements QueueTDG {

    public QueueTDGImpl(ConnectionProvider connectionProvider) {
        super(connectionProvider);
    }

    @Override
    public <T> QueueToken<T> peekAtNextQueueElement(Class<T> type) throws PersistenceException {
        ConnectionProvider provider = super.getConnectionProvider();
        SQLiteConnection connection = provider.aquireConnection();
        try {
            SQLiteStatement statement = connection.prepare("select id, value from QUEUES WHERE type = ? ORDER BY id ASC LIMIT 1").bind(1, type.getCanonicalName());
            try {
                while (statement.step()) {
                    long id = statement.columnLong(0);
                    String value = statement.columnString(1);

                    return new QueueTokenImpl<T>(new Gson().fromJson(value, type), id);
                }
                throw new PersistenceException("failed to get queue element");

            } finally {
                statement.dispose();
            }
        } catch (SQLiteException ex) {
            throw new PersistenceException("failed to get queue element", ex);
        } finally {
            provider.releaseConnection();
        }


    }

    @Override
    public void dequeue(QueueToken token) throws PersistenceException {
        if (token instanceof QueueTokenImpl) {
            QueueTokenImpl typedToken = (QueueTokenImpl) token;
            ConnectionProvider provider = super.getConnectionProvider();
            SQLiteConnection connection = provider.aquireConnection();
            try {
                connection.prepare("delete from QUEUES WHERE id = ?").bind(1, typedToken.getId()).stepThrough();
            } catch (SQLiteException ex) {
                throw new PersistenceException("failed to remove queue element with id " + typedToken.getId(), ex);
            } finally {
                provider.releaseConnection();
            }
        } else {
            throw new PersistenceException("provided token instance not generated by this table data gateway");
        }
    }

    /**
     *
     * @throws PersistenceException
     */
    @Override
    public void createTableIfMissing() throws PersistenceException {
        ConnectionProvider provider = super.getConnectionProvider();
        SQLiteConnection connection = provider.aquireConnection();
        try {
            if (!Tables.tableExists(connection, "QUEUES")) {
                connection.prepare("create table QUEUES ("
                        + "id INT IDENTITY PRIMARY KEY,"
                        + "value TEXT,"
                        + "type TEXT"
                        + ")").stepThrough();
            }
        } catch (SQLiteException ex) {
            throw new PersistenceException("failed to create tables for queues", ex);
        } finally {
            provider.releaseConnection();

        }
    }

    @Override
    public <T> void enqueue(Class<T> type, T value) throws PersistenceException {
        ConnectionProvider provider = super.getConnectionProvider();
        SQLiteConnection connection = provider.aquireConnection();
        try {
            String jsonValue = new Gson().toJson(value);
            connection.prepare("insert  into QUEUES (type, value) VALUES (?,?)").bind(1, type.getCanonicalName()).bind(2, jsonValue).stepThrough();
        } catch (SQLiteException ex) {
            throw new PersistenceException("failed to insert queue element of type " + type.getCanonicalName(), ex);
        } finally {
            provider.releaseConnection();
        }
    }
}
